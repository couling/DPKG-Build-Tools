#!/bin/bash

# Builds a project based on a manifest file.
# Parameters (bracketed are optional).
# 1: manifest file
# 2: source dir
# [3]: target folder

set -e

source_folder="$1"
manifest="$source_folder/other/manifest"
target_folder="$3"

package_folder="/tmp/package-project-$$"

if [ -z "$manifest" ]
then
	echo "Error: No manifest specifed" >&2
	exit 1
fi

if ! [ -f "$manifest" ]
then
	echo "Error: manifest $manifest does not exist or is not a regular file" >&2
	exit 1
fi

if [ -z "$source_folder" ] 
then
	echo "Error: no source folder specified" >&2
	exit 1
fi

if ! [ -d "$source_folder" ]
then
	echo "Error: source folder $source_folder does not exist or is not a folder" >&2
	exit 1
fi

mkdir "$package_folder"


# From this point forward we need to delet the temp folder if anything fails.
trap 'chmod -R u+w $package_folder ; rm -rf "$package_folder"; exit $?' INT TERM EXIT


if [ -z "$target_folder" ] 
then
	target_folder='.'
else 
	if ! [ -d "$target_folder" ]
	then
		echo "Warning: $target_folder is not a directory, using target of '.' as target" >&2
		target_folder='.'
	fi
fi


IFS=':'
grep -v '^#' "$manifest" | while read action source_file target_file file_mode
do
	if [ -n "$action" ] 
	then
		echo "Processing: $action - $source_file - $target_file"
		mkdir -p `dirname "$package_folder/$target_file"`

		if [ -e "$package_folder/$target_file" ]
		then
			echo "Error: file already exists $package_folder/$target_file" >&2
			exit 1
		fi

		if [ "$action" = 'file' ]
		then
			cp -r "$source_folder/$source_file" "$package_folder/$target_file"
			if [ -n "$file_mode" ]
			then
				chmod -R "$file_mode" "$package_folder/$target_file"
			fi
		elif [ "$action" = 'link' ]
		then
			ln -s "$source_file" "$package_folder/$target_file"
		elif [ "$action" = 'dir' ]
		then
			mkdir -p "$package_folder/$target_file"
			if [ -n "$file_mode" ]
			then
				chmod -R "$file_mode" "$package_folder/$target_file"
			fi
		else 
			echo "Error: unknown action $action" >&2
			exit 1
		fi 
	fi
done

find "$package_folder" -name .svn -exec rm -rf {} +

fakeroot dpkg-deb --build "$package_folder" "$target_folder"

exit 0
